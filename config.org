#+TITLE: Config written in org mode
#+CREATOR: Ángel Castañeda

* basic configs

** unguiing

#+begin_src emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (setq inhibit-startup-message t)
#+end_src

** subword mode

camelCaseAcknowledgment

#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src

** clock

#+begin_src emacs-lisp
  (display-time-mode 1)
#+end_src

** no autosaves or backups

#+begin_src emacs-lisp
    (setq make-backup-files nil)
    (setq auto-save-default nil)
#+end_src

** electric

#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      ))
  (electric-pair-mode t)
#+end_src

** no bell

#+begin_src emacs-lisp
    (setq ring-bell-function 'ignore)
#+end_src

** show line and pretty symbols in gui mode

#+begin_src emacs-lisp
    (when window-system (global-hl-line-mode t))
    (when window-system (global-prettify-symbols-mode t))
#+end_src

** relative line nums

#+begin_src emacs-lisp
    (setq display-line-numbers-type 'relative)
    (global-display-line-numbers-mode)
#+end_src

** which-key

#+begin_src emacs-lisp
    (use-package which-key
	:ensure t
	:init
	(which-key-mode))
#+end_src

** evil mode

#+begin_src emacs-lisp
  (use-package undo-fu
    :ensure t)
  (use-package evil
    :ensure t
    :demand t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    (setq evil-want-keybinding nil)
    ;; no vim insert bindings
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1))
#+end_src

*** evil collections

#+begin_src emacs-lisp
  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))
#+end_src

** vertico

better ido

*** load package

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
#+end_src

*** save minibuf hist

#+begin_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

** marginalia

for getting metadata for files and cmds with vertico

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

** ido

*** set switch-buffer macro

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src

** buffer switching

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+end_src

*** always kill current buffer

#+begin_src emacs-lisp
  (defun kill-curr-buff ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buff)
#+end_src

** dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10))))
#+end_src

** avy

#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src

** diminish mode

hides specified minor modes in status line

#+begin_src emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'rainbow-mode)
    (diminish 'evil-collection-unimpaired-mode)
    (diminish 'which-key-mode)
    (diminish 'subword-mode))
#+end_src

** y/n instead of yes/no

#+begin_src emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** conf edit/reload

*** edit

#+begin_src emacs-lisp
  (defun conf-edit ()
    (interactive)
    (find-file "~/.config/emacs/config.org"))
  (global-set-key (kbd "C-c e") 'conf-edit)
#+end_src

*** reload

#+begin_src emacs-lisp
  (defun conf-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.config/emacs/config.org")))
  (global-set-key (kbd "C-c r") 'conf-reload)
#+end_src

** rainbows

*** for hex codes

#005F87

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src

*** for parens

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+end_src

** smooth scroll

#+begin_src emacs-lisp
  (setq scroll-conservatively 101)
  (setq scroll-margin 8)
#+end_src

** insert signature

#+begin_src emacs-lisp
  (defun insert-signature ()
    "Sign with name and email"
    (interactive)
    (insert "Ángel Castañeda <angel@acsq.me>"))

  (global-set-key (kbd "C-c s") 'insert-signature)
#+end_src

* modus themes

** load theme
#+begin_src emacs-lisp
  (load-theme 'modus-operandi t)
#+end_src

* git

** magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src

** git gutter

#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode +1)
    (setq git-gutter:update-interval 0.02))
#+end_src

#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :ensure t
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

* terminal

** default zsh

#+begin_src emacs-lisp
    (defvar my-terminal-shell "/usr/bin/zsh")
    (defadvice ansi-term (before force-bash)
	(interactive (list my-terminal-shell)))
    (ad-activate 'ansi-term)
#+end_src

* email

** notmuch
notmuch needs to be installed by the distro's package manager. See
more in the [[https://notmuchmail.org/notmuch-emacs/#index2h2][notmuch wiki]].

#+begin_src emacs-lisp
  (autoload 'notmuch "notmuch" "notmuch mail" t)
#+end_src

* org stuff

** make headers scale

#+begin_src emacs-lisp
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 2.0))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.8))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.6))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
   (set-face-attribute 'org-document-title nil :height 2.0))
#+end_src

** org-roam

*** load package

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/Documents/org/roam/"))
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n")
	:unnarrowed t)
       ("Q" "quote" plain (file "~/.config/emacs/captures/roam/quotes.tmpl.org")
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	:unnarrowed t)
       ("b" "books" plain (file "~/.config/emacs/captures/roam/books.tmpl.org")
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	:unnarrowed t)
       ))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))
#+end_src

*** make node-find case insensitive

#+begin_src emacs-lisp
  (defun case-insensitive-org-roam-node-read (orig-fn &rest args)
    (let ((completion-ignore-case t))
      (apply orig-fn args)))

  (advice-add 'org-roam-node-read :around #'case-insensitive-org-roam-node-read)
#+end_src

*** roam ui

#+begin_src emacs-lisp
  (use-package org-roam-ui
    :ensure t
    :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
	  org-roam-ui-follow t
	  org-roam-ui-update-on-save t
	  org-roam-ui-open-on-start t))
#+end_src

** code swallow buffer

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

** Auto timestamp for DONE

#+begin_src emacs-lisp
  (setq org-log-done 'time)
#+end_src

** org-agenda

*** org-agenda dir

#+begin_src emacs-lisp
  (setq org-agenda-files '("~/org"))
#+end_src

*** org-agenda binding

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
#+end_src

*** custom org-agenda view
from prot vid

#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
	'(
	  (
	   "o" "overview"
	   ((todo "TODO"
		  ((org-agenda-overriding-header "Important tasks\n")))
	    (agenda ""
		    ((org-agenda-block-separator ?*)
		     (org-agenda-span 1)
		     (org-deadline-warning-days 0)
		     (org-agenda-use-time-grid t)
		     (org-agenda-overriding-header "Daily agenda\n"))))
	   )
	  ))
#+end_src

*** show time grid

#+begin_src emacs-lisp
(setq org-agenda-time-grid
       '((daily weekly today remove-match)
        (600 800 1000 1200 1400 1600 1800 2000)
        "......" "----------------"))
  (setq org-log-into-drawer t)
  ;(setq org-agenda-start-with-log-mode t)
#+end_src
